如下的代码是线程安全的懒汉式单例类的实现：
 



[java] view plaincopy
01.public class Singleton {  
02.    private static Singleton instance;  
03.    private final static Object syncLock = new Object();  
04.     
05.    private Singleton() {  
06.         
07.    }  
08.     
09.    public static Singleton getInstance(){  
10.        if (instance == null) {  
11.            synchronized (syncLock) {  
12.                if (instance == null) {  
13.                    instance = new Singleton();  
14.                }  
15.            }  
16.        }  
17.         
18.        return instance;  
19.    }  
20.}  
 

 
 
需要注意的是，synchronized同步块处括号中的锁定对象采用的是一个无关的Object类实例。将它作为锁而不是通常synchronized所用的this，其原因是getInstance方法是一个静态方法，在它的内部不能使用未静态的或者未实例化的类对象（避免空指针异常）。同时也没有直接使用instance作为锁定的对象，是因为加锁之时，instance可能还没实例化（同样是为了避免空指针异常）。
 
此外，单例类中不建议将getInstance方法修饰为synchronized方法，其原因是一旦这样做了，其效果就跟《大话设计模式》书中21.5小节的示例是一样的了。这种做法会在每次调用getInstance方法时，都需要加锁，与上例相比效率更低。


使用synchronized：
 



[java] view plaincopy
01.class MyCache{  
02.    private Map<String,Object> cache = new HashMap<String,Object>();  
03.    public synchronized Object getObject(String key){  
04.        //加上锁是为了避免多个线程在得到的value都为null时，都同时去访问数据库  
05.        Object value=cache.get(key);  
06.        if(value==null){  
07.            value="aaaaa";//其实是从数据库中得到相关的记录  
08.            cache.put(key, value);  
09.        }  
10.        return value;  
11.    }  
12.}  
使用读写锁：
 



[java] view plaincopy
01.class MyCache1{  
02.    private Map<String,Object> cache = new HashMap<String,Object>();  
03.    private ReadWriteLock rwl = new ReentrantReadWriteLock();  
04.    public Object getObject(String key){  
05.        rwl.readLock().lock();  
06.        Object value=cache.get(key);  
07.        if(value==null){  
08.            rwl.readLock().unlock();//必须首先解锁才能获取写锁  
09.            rwl.writeLock().lock();  
10.            if(value==null){//这里为什么还要判断，避免多个写锁被阻塞(因为只能有一个写锁是互斥的)的时候，重复对value进行赋值，从而访问数据库  
11.                value="aaaaa";//其实是从数据库中得到相关的记录  
12.                cache.put(key, value);  
13.            }  
14.            //对锁进行降级，把写锁降级为读锁  
15.            rwl.readLock().lock();//重新获取读锁不放弃写锁  
16.            rwl.writeLock().unlock();//写锁解除，读锁仍在  
17.        }  
18.        rwl.readLock().unlock();  
19.        return value;  
20.    }  
21.}  
1 package com.thread;
 2 
 3 import java.util.HashMap;
 4 import java.util.Map;
 5 import java.util.concurrent.locks.ReadWriteLock;
 6 import java.util.concurrent.locks.ReentrantReadWriteLock;
 7 
 8 public class CacheDemo {
 9     private Map<String, Object> map = new HashMap<String, Object>();//缓存器
10     private ReadWriteLock rwl = new ReentrantReadWriteLock();
11     public static void main(String[] args) {
12         
13     }
14     public Object get(String id){
15         Object value = null;
16         rwl.readLock().lock();//首先开启读锁，从缓存中去取
17         try{
18             value = map.get(id); 
19             if(value == null){  //如果缓存中没有释放读锁，上写锁
20                 rwl.readLock().unlock();
21                 rwl.writeLock().lock();
22                 try{
23                     if(value == null){
24                         value = "aaa";  //此时可以去数据库中查找，这里简单的模拟一下
25                     }
26                 }finally{
27                     rwl.writeLock().unlock(); //释放写锁
28                 }
29                 rwl.readLock().lock(); //然后再上读锁
30             }
31         }finally{
32             rwl.readLock().unlock(); //最后释放读锁
33         }
34         return value;
35     }
36 
37 }


1 package com.thread;
 2 
 3 import java.util.Random;
 4 import java.util.concurrent.locks.ReentrantReadWriteLock;
 5 
 6 public class ReadWriteLockTest {
 7     public static void main(String[] args) {
 8         final Queue3 q3 = new Queue3();
 9         for(int i=0;i<3;i++)
10         {
11             new Thread(){
12                 public void run(){
13                     while(true){
14                         q3.get();                        
15                     }
16                 }
17                 
18             }.start();
19         }
20         for(int i=0;i<3;i++)
21         {        
22             new Thread(){
23                 public void run(){
24                     while(true){
25                         q3.put(new Random().nextInt(10000));
26                     }
27                 }            
28                 
29             }.start();    
30         }

31     }
32 }
33 
34 class Queue3{
35     private Object data = null;//共享数据，只能有一个线程能写该数据，但可以有多个线程同时读该数据。
36     private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
37     public void get(){
38         rwl.readLock().lock();//上读锁，其他线程只能读不能写
39         System.out.println(Thread.currentThread().getName() + " be ready to read data!");
40         try {
41             Thread.sleep((long)(Math.random()*1000));
42         } catch (InterruptedException e) {
43             e.printStackTrace();
44         }
45         System.out.println(Thread.currentThread().getName() + "have read data :" + data);        
46         rwl.readLock().unlock(); //释放读锁，最好放在finnaly里面
47     }
48     
49     public void put(Object data){
50 
51         rwl.writeLock().lock();//上写锁，不允许其他线程读也不允许写
52         System.out.println(Thread.currentThread().getName() + " be ready to write data!");                    
53         try {
54             Thread.sleep((long)(Math.random()*1000));
55         } catch (InterruptedException e) {
56             e.printStackTrace();
57         }
58         this.data = data;        
59         System.out.println(Thread.currentThread().getName() + " have write data: " + data);                    
60         
61         rwl.writeLock().unlock();//释放写锁    
62     }
63 }
