
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;
import net.sf.json.JSONObject;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
/**
 * This class it a util of building object to a XML format string.
 *
 *
 */
public class Object2XMLUtil{
	private static final Logger log = Logger.getLogger(Object2XMLUtil.class);
	
	public static final String RESPONSE_MSG = "msg";
	public static final String RESPONSE_SUCCESS = "success";
	 
	
	/**
	 * @param <T>
	 * @param list
	 * @param sumCount
	 * @return
	 */
	public static <T> String objectstoXML(List<T> list,int sumCount) 
	{
		Document xmldoc=DocumentHelper.createDocument();
		Element root= xmldoc.addElement("dataset");
		Element rsCount= DocumentHelper.createElement("results");
		
		rsCount.setText(String.valueOf(sumCount));
		
		root.add(rsCount);
		
		for (T object : list) {			
				//一个数据对象
				Element row= DocumentHelper.createElement("row");
	          	buildFieldsSection(object, row);	          	
	          	root.add(row);
	       }
		
		log.debug("  [get(list,int)]: return XML string is:"+xmldoc.asXML());		
		return xmldoc.asXML();
	}
	/**
	 * 把字段你数据最为xml中的数据区的部分。形如：
	 *  <br>
	 * &lt;Id>10&lt/Id&gt;
	 * 	<br>
	 * &lt;Username>admin &lt;/Username&gt;
	 * 	<br>
	 * &lt;Userage>20&lt
	 * &lt;/Userage&gt;
	 * @param <T>
	 * @param object
	 * @param row
	 */
	private static  <T> void buildFieldsSection(T object, Element row) {
		for (Method method :object.getClass().getMethods())
		{			
			//一个属性值	          		
      		if((method.getName().indexOf("get")==0) && (method.getName()!="getClass"))
      		{
				try {
					
					Object rsvalue = method.invoke(object);
					Element col= DocumentHelper.createElement(method.getName().substring(3));
					col.setText(String.valueOf(rsvalue));
					row.add(col);
					//System.out.println(rsvalue);
					
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
      		}
		}
	}
	
	
	/**返回形如：
	 * <br>
	 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;
	 * <br>
	 * &lt;response success="true"/&gt;
	 * @return
	 */
	public static String getSuccessXml()
	{
		
		Document xmldoc=DocumentHelper.createDocument();
		Element root= xmldoc.addElement("response");
		
		root.addAttribute("success", "true");
		log.debug("  [getSuccessXml]: return XML string is:"+xmldoc.asXML());
		return xmldoc.asXML();
	}
	
	/**返回形如：
	 * <br>
	 * &lt;?xml version="1.0" encoding="UTF-8"?  &gt;
	 * <br>
	 * &lt;response success="false"/&gt;
	 * @return
	 */
	public static String getFailureXml()
	{
		
		Document xmldoc=DocumentHelper.createDocument();
		Element root= xmldoc.addElement("response");
		
		root.addAttribute("success", "false");
		log.debug("  [getFailureXml]: return XML string is:"+xmldoc.asXML());
		return xmldoc.asXML();
	}
	public static String getFailureJson() {
	
		return "{\"success\":false,\"msg\":\"出现异常\"}";
	}
	public static String getSuccessJson() {
		
		return "{\"success\":true,\"msg\":\"操作成功\"}";
	}
	
	public static String getFailureJson(String msg,String str) {
		
		return "{\"success\":false,\""+msg+"\":"+str+"}";
	}
	/**动态拼接返回数据
	 * @param respMap
	 * @return Json string
	 */
	public static String getResponseJson(Map respMap) {
		if(respMap==null){
			return "";
		}
		return JSONObject.fromObject(respMap).toString();	
	}
	
	public static String getFailureJson(String msg,String str,boolean confirm) {
		
		return "{\"success\":false,\""+msg+"\":"+str+",\"confirm\":"+confirm+"}";
	}
	public static String getSuccessJson(String msg,String str) {
		
		return "{\"success\":true,\""+msg+"\":"+str+"}";
	}
    public static String getSuccessJson(String msg,String str,boolean confirm,String pwd) {
		
		return "{\"success\":true,\""+msg+"\":"+str+",\"confirm\":"+confirm+",\"pwd\":\""+pwd+"\"}";
	}
}
